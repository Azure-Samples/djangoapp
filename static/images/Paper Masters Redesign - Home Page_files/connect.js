define(["angular"],function(angular){var module=angular.module("qb.connect.persistence",[]);module.constant("HttpStatusCodes",{USER_CANCELLED:0,BAD_REQUEST:400,FORBIDDEN:403,NOT_FOUND:404,CONFLICT:409,GATEWAY_TIMEOUT:504});module.constant("RequirementsOverrideLabels",{QuickBase:{"Database Name":"Application ID"}});module.factory("qbConnectSessionService",["$http","$q","$window","HttpStatusCodes",function($http,$q,$window,HttpStatusCodes){var MINUTE_MILLISECONDS=60000;var EXPIRATION_BUFFER_MINUTES=5;var SESSION_KEY="connect.session";var SESSION_EXPIRATION_KEY="ccSessionExpires";var sessionService={};var _watchTimeout=null;var getRemainingMilliseconds=function(session){var expirationTimestamp=parseInt(session.expiresAt)-(EXPIRATION_BUFFER_MINUTES*MINUTE_MILLISECONDS);var now=new Date();return expirationTimestamp-now.getTime()};var getSession=function(){var session=QB.Storage.User.get(SESSION_KEY,null,false);if(session&&getRemainingMilliseconds(session)<MINUTE_MILLISECONDS){session=null;storeSession(null)}return session};var storeSession=function(session){QB.Storage.User.set(SESSION_KEY,session,false)};var getSessionCookie=function(){return getCookieValue(SESSION_EXPIRATION_KEY,null,null)};var loadSession=function(){var session=getSession();var sessionExpires=getSessionCookie();if(session&&(!sessionExpires||(session.expiresAt!=sessionExpires))){session=null;storeSession(null)}if(session){watchSession(session)}return session};var watchSession=function(session,watchPeriod){watchPeriod=watchPeriod||getRemainingMilliseconds(session);if(watchPeriod&&watchPeriod>0){_watchTimeout=setTimeout(createSession,watchPeriod)}};var createSession=function(){var promise=$http({method:"POST",url:"/qb/replicatedTableV2/sessions"});var success=function(response){var sessionResponse=null;var session=response.data;if(session.username){session.expiresAt=getSessionCookie();storeSession(session);watchSession(session);sessionResponse=session}else{var error={status:500,errorMessage:"Received invalid session response"};sessionResponse=$q.reject(error);storeSession(null)}return sessionResponse};var error=function(error){if(error.status==HttpStatusCodes.USER_CANCELLED){}else{if(error.status==HttpStatusCodes.NOT_FOUND&&_.isEmpty(error.headers())){error.status=HttpStatusCodes.USER_CANCELLED}else{storeSession(null)}}return $q.reject(error)};return promise.then(success,error)};sessionService.createSupportSession=function(uid){var promise=$http({method:"POST",url:"/qb/replicatedTableV2/support/sessions",params:{uid:uid}});var success=function(response){var sessionResponse=null;var session=response.data;if(session.username){sessionResponse=session}else{sessionResponse=$q.reject({status:500,errorMessage:"Received invalid session response"})}return sessionResponse};var error=function(error){if(error.status==HttpStatusCodes.USER_CANCELLED){}else{if(error.status==HttpStatusCodes.NOT_FOUND&&_.isEmpty(error.headers())){error.status=HttpStatusCodes.USER_CANCELLED}}return $q.reject(error)};return promise.then(success,error)};sessionService.getSession=function(){var promise=null;var session=getSession();if(session){var deferred=$q.defer();deferred.resolve(session);promise=deferred.promise}else{promise=createSession()}return promise};sessionService.logout=function(){var promiseList=[];var session=getSession();if(session){var promise=$http({method:"DELETE",url:"/qb/replicatedTableV2/sessions/"});promiseList.push(promise);sessionService.clearSession()}return $q.all(promiseList)};sessionService.clearSession=function(){if(_watchTimeout){clearTimeout(_watchTimeout);_watchTimeout=null}storeSession(null)};loadSession();return sessionService}]);module.factory("qbConnectPersistenceService",["qbConnectSessionService","HttpStatusCodes","$q",function(sessionService,HttpStatusCodes,$q){var persistenceService={};persistenceService.success=function(response){return response.data};persistenceService.error=function(error){if(error.status==HttpStatusCodes.BAD_REQUEST){sessionService.clearSession()}else{if(error.status==HttpStatusCodes.USER_CANCELLED){}else{if(error.status==HttpStatusCodes.NOT_FOUND&&_.isEmpty(error.headers())){error.status=HttpStatusCodes.USER_CANCELLED}}}return $q.reject(error)};return persistenceService}]);module.factory("qbConnectTaskService",["$http","$q","qbConnectSessionService","HttpStatusCodes","qbConnectPersistenceService",function($http,$q,sessionService,HttpStatusCodes,persistenceService){var taskService={};taskService.checkForTask=function(localReplicationId,includeAborted,getInitialStatus){var promise=sessionService.getSession().then(function(session){var promise=$http({method:"GET",url:"/qb/replicatedTableV2/replicationTaskStatus/"+localReplicationId,params:{includeAborted:includeAborted,getInitialStatus:getInitialStatus}});return promise.then(persistenceService.success,persistenceService.error)});return promise};taskService.startTask=function(replicationId){var promise=sessionService.getSession().then(function(session){var promise=$http({method:"POST",url:"/qb/replicatedTableV2/replicationTasks",params:{replicationID:replicationId}});return promise.then(persistenceService.success,persistenceService.error)});return promise};taskService.waitForResults=function(tableID,taskID){var promise=sessionService.getSession().then(function(session){var promise=$http({method:"GET",url:"/qb/replicatedTableV2/replicationTasks/"+taskID,params:{replicationId:ReplicationId,includeAborted:false}});var success=function(response){return response.data};var error=function(error){var retryPromise=$q.reject(error);var rejected=true;if(error.status==HttpStatusCodes.BAD_REQUEST){sessionService.clearSession()}else{if(error.status==HttpStatusCodes.USER_CANCELLED){rejected=false}else{if(error.status==HttpStatusCodes.NOT_FOUND&&_.isEmpty(error.headers())){error.status=HttpStatusCodes.USER_CANCELLED;rejected=false}else{if(error.status==HttpStatusCodes.GATEWAY_TIMEOUT){retryPromise=taskService.waitForResults(tableID,taskID);rejected=false}}}}if(rejected){}return retryPromise};return promise.then(success,error)});return promise};return taskService}]);module.factory("qbConnectChannelService",["$http","$q","qbConnectSessionService","HttpStatusCodes","qbConnectPersistenceService",function($http,$q,sessionService,HttpStatusCodes,persistenceService){var channelService={};channelService.getChannels=function(){var promise=sessionService.getSession().then(function(session){var promise=$http({method:"GET",url:"/qb/replicatedTableV2/channels"});return promise.then(persistenceService.success,persistenceService.error)});return promise};channelService.getChannelRequirements=function(channelID){var promise=sessionService.getSession().then(function(session){var promise=$http({method:"GET",url:"/qb/replicatedTableV2/channels/"+encodeURIComponent(channelID)+"/requirements"});return promise.then(persistenceService.success,persistenceService.error)});return promise};return channelService}]);module.factory("qbConnectConnectionService",["$http","$q","qbConnectSessionService","HttpStatusCodes","qbConnectPersistenceService",function($http,$q,sessionService,HttpStatusCodes,persistenceService){var connectionService={};var connectionCache={};connectionService.getConnections=function(){var promise=sessionService.getSession().then(function(session){var promise=$http({method:"GET",url:"/qb/replicatedTableV2/connections"});return promise.then(persistenceService.success,persistenceService.error)});return promise};connectionService.getConnection=function(connectionID){var promise=null;var connection=connectionCache[connectionID];if(connection){var deferred=$q.defer();deferred.resolve(connection);promise=deferred.promise}else{promise=sessionService.getSession().then(function(session){var promise=$http({method:"GET",url:"/qb/replicatedTableV2/connections/"+connectionID});var success=function(response){connectionCache[connectionID]=response.data;return response.data};return promise.then(success,persistenceService.error)})}return promise};connectionService.getConnectionRequirements=function(connectionID){var promise=sessionService.getSession().then(function(session){var promise=$http({method:"GET",url:"/qb/replicatedTableV2/connections/"+encodeURIComponent(connectionID)+"/requirements"});return promise.then(persistenceService.success,persistenceService.error)});return promise};connectionService.saveConnection=function(connection){var promise=sessionService.getSession().then(function(session){var promise=$http({method:"POST",url:"/qb/replicatedTableV2/connections",data:connection});return promise.then(persistenceService.success,persistenceService.error)});return promise};connectionService.updateConnection=function(connection){var promise=sessionService.getSession().then(function(session){var promise=$http({method:"PUT",url:"/qb/replicatedTableV2/connections",data:connection});var success=function(response){return response.data};return promise.then(success,persistenceService.error)});return promise};connectionService.getSavedParameters=function(connectionID){var promise=sessionService.getSession().then(function(session){var promise=$http({method:"GET",url:"/db/main?a=JBI_GetConnectionParameters&connectionID="+encodeURIComponent(connectionID)});return promise.then(function(response){return response.data.parameters})});return promise};connectionService.deleteConnection=function(connectionID){var promise=sessionService.getSession().then(function(session){var promise=$http({method:"DELETE",url:"/qb/replicatedTableV2/connections/"+encodeURIComponent(connectionID)});return promise.then(persistenceService.success,persistenceService.error)});return promise};connectionService.createOauthTask=function(credential){var promise=sessionService.getSession().then(function(session){var promise=$http({method:"POST",url:"/qb/replicatedTableV2/oauthTasks",data:credential});return promise.then(persistenceService.success,persistenceService.error)});return promise};connectionService.waitForOauthTask=function(oauthTaskId){var promise=sessionService.getSession().then(function(session){var promise=$http({method:"GET",url:"/qb/replicatedTableV2/oauthTasks/"+oauthTaskId});return promise.then(persistenceService.success,persistenceService.error)});return promise};return connectionService}]);module.factory("qbConnectCredentialService",["$http","$q","qbConnectSessionService","HttpStatusCodes","qbConnectPersistenceService",function($http,$q,sessionService,HttpStatusCodes,persistenceService){var credentialService={};credentialService.getCredentials=function(){var promise=sessionService.getSession().then(function(session){var promise=$http({method:"GET",url:"/qb/replicatedTableV2/userCredentials"});return promise.then(persistenceService.success,persistenceService.error)});return promise};credentialService.getCredential=function(credName){var promise=sessionService.getSession().then(function(session){var promise=$http({method:"GET",url:"/qb/replicatedTableV2/userCredentials/"+encodeURIComponent(credName)});return promise.then(persistenceService.success,persistenceService.error)});return promise};credentialService.saveCredential=function(credential){var promise=sessionService.getSession().then(function(session){var promise=$http({method:"POST",url:"/qb/replicatedTableV2/userCredentials",data:credential});return promise.then(persistenceService.success,persistenceService.error)});return promise};credentialService.updateCredential=function(credential){var promise=sessionService.getSession().then(function(session){var promise=$http({method:"PUT",url:"/qb/replicatedTableV2/userCredentials",data:credential});return promise.then(persistenceService.success,persistenceService.error)});return promise};credentialService.copyCredential=function(oldName,newName){var promise=sessionService.getSession().then(function(session){var promise=$http({method:"POST",url:"/qb/replicatedTableV2/userCredentialsClone",params:{sessionID:session.id},data:{oldName:oldName,name:newName,restType:"SavedCredential"}});return promise.then(persistenceService.success,persistenceService.error)});return promise};credentialService.deleteCredential=function(credName){var promise=sessionService.getSession().then(function(session){var promise=$http({method:"DELETE",url:"/qb/replicatedTableV2/userCredentials/"+encodeURIComponent(credName)});return promise.then(persistenceService.success,persistenceService.error)});return promise};return credentialService}]);module.factory("qbConnectDataSetService",["$http","$q","qbConnectSessionService","HttpStatusCodes","qbConnectPersistenceService",function($http,$q,sessionService,HttpStatusCodes,persistenceService){var dataSetService={};var dataSetCache={};var columnCache={};dataSetService.getDataSets=function(connectionID){var promise=sessionService.getSession().then(function(session){var promise=$http({method:"GET",url:"/qb/replicatedTableV2/connections/"+encodeURIComponent(connectionID)+"/dataSets"});return promise.then(persistenceService.success,persistenceService.error)});return promise};dataSetService.getDataSet=function(dataSetID){var promise=null;var dataSet=dataSetCache[dataSetID];if(dataSet){var deferred=$q.defer();deferred.resolve(dataSet);promise=deferred.promise}else{promise=sessionService.getSession().then(function(session){var promise=$http({method:"GET",url:"/qb/replicatedTableV2/dataSets",params:{dataSetID:encodeURIComponent(dataSetID)}});var success=function(response){dataSetCache[dataSetID]=response.data;return response.data};return promise.then(success,persistenceService.error)})}return promise};dataSetService.getColumns=function(dataSetID){var promise=null;var columns=columnCache[dataSetID];if(columns){var deferred=$q.defer();deferred.resolve(columns);promise=deferred.promise}else{promise=sessionService.getSession().then(function(session){var promise=$http({method:"GET",url:"/qb/replicatedTableV2/dataSets/columns",params:{dataSetID:encodeURIComponent(dataSetID)}});var success=function(response){columnCache[dataSetID]=response.data;return response.data};return promise.then(success,persistenceService.error)})}return promise};return dataSetService}]);module.factory("qbConnectTableService",["$http","$q","qbConnectSessionService","HttpStatusCodes","qbConnectPersistenceService",function($http,$q,sessionService,HttpStatusCodes,persistenceService){var tableService={};var tableCache={};tableService.getTable=function(tableID){var promise=null;var tableReplication=tableCache[tableID];if(tableReplication){var deferred=$q.defer();deferred.resolve(tableReplication);promise=deferred.promise}else{promise=sessionService.getSession().then(function(session){var promise=$http({method:"GET",url:"/qb/replicatedTableV2/replicatedTables/"+tableID});var success=function(response){tableCache[tableID]=response.data;return response.data};return promise.then(success,persistenceService.error)})}return promise};tableService.createTable=function(tableDefinition){var promise=sessionService.getSession().then(function(session){var promise=$http({method:"POST",url:"/qb/replicatedTableV2/replicatedTables",data:tableDefinition});return promise.then(persistenceService.success,persistenceService.error)});return promise};tableService.updateTable=function(tableDefinition){var promise=sessionService.getSession().then(function(session){var promise=$http({method:"PUT",url:"/qb/replicatedTableV2/replicatedTables",data:tableDefinition});var success=function(response){tableCache[tableDefinition.table.id]=tableDefinition;return response.data};return promise.then(success,persistenceService.error)});return promise};tableService.deleteFields=function(appID,tableID,fieldIDs){var promise=sessionService.getSession().then(function(session){var promise=$http({method:"PUT",url:"/qb/replicatedTableV2/replicatedTables/"+tableID+"/fields",data:fieldIDs});return promise.then(persistenceService.succes,persistenceService.error)});return promise};tableService.updateConnectionForTables=function(oldConnectionName,newConnectionName,tableData){var promise=sessionService.getSession().then(function(session){var promise=$http({method:"PUT",url:"/qb/replicatedTableV2/replicatedTables/tables",params:{oldConnectionName:oldConnectionName,newConnectionName:newConnectionName},data:tableData});return promise.then(persistenceService.succes,persistenceService.error)});return promise};return tableService}]);module.service("qbRequirementsService",["RequirementsOverrideLabels",function(labels){return{getPropertyList:function(requirements){var props=[];_.each(requirements.parameters,function(param){prop={name:param.name,label:param.name,valueType:param.valueType,valueList:[{value:"",valueType:param.valueType}],hasDefault:false};var match=_.findWhere(requirements.defaultParameters,{name:prop.name});if(match){prop.valueList[0].value=match.valueList[0].value;prop.hasDefault=true}if(labels[requirements.name]&&labels[requirements.name][prop.name]){prop.label=labels[requirements.name][prop.name]}props.push(prop)});return props},getCredentialList:function(requirements){var creds=[];_.each(requirements.credentials,function(cred){var components=[];_.each(cred.parameters,function(param){components.push({name:param.name,value:""})});creds.push({credName:cred.name,name:"",type:cred.type,components:components})});return creds}}}]);return module});